- name: Install bind9 and prometheus-bind-exporter
  ansible.builtin.apt:
    name: 
      - bind9
    state: present

- name: Extract Bind9 exporter
  ansible.builtin.unarchive:
    src: https://github.com/prometheus-community/bind_exporter/releases/download/v0.7.0/bind_exporter-0.7.0.linux-amd64.tar.gz
    dest: /opt
    remote_src: yes
    extra_opts: [ "--strip-components=1", "--wildcards", "--no-anchored", "bind_exporter" ]

- name: Create symlink to Bind9 exporter executable
  ansible.builtin.file:
    src: /opt/bind_exporter
    dest: /usr/local/bin/prometheus-bind-exporter
    state: link

- name: Create Bind9 exporter systemd service
  ansible.builtin.copy:
    dest: /etc/systemd/system/bind_exporter.service
    content: |
      [Unit]
      Description=Exporter for Bind9
      Wants=network-online.target
      After=network.target

      [Service]
      User=bind
      Group=bind
      ExecStart=/usr/local/bin/prometheus-bind-exporter
      Restart=always

      [Install]
      WantedBy=multi-user.target
  notify:
    - Reload systemd
    - Restart bind9-exporter

- name: Start bind9
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - named
    - bind_exporter

- name: Create bind9 config
  ansible.builtin.template:
    dest: /etc/bind/named.conf.{{ item }}
    src: named.conf.{{ item }}.j2
    mode: '0644'
  loop:
    - local
    - options
  notify: 
    - Restart bind9
    - Restart bind9-exporter

- name: Template database zone config
  ansible.builtin.template:
    dest: /var/cache/bind/db.{{ domain_name }}
    src: db.{{ domain_name }}.j2
    force: no
    mode: '0644'
  notify: Reload bind9
  when: inventory_hostname in groups ['dns_primary']

- name: Template reverse zone config
  ansible.builtin.template:
    dest: /var/cache/bind/rev.db.{{ domain_name }}
    src: rev.db.{{ domain_name }}.j2
    force: yes
  notify: Reload bind9
  when: inventory_hostname in groups ['dns_primary']

- name: Install python3-dnspython as a nsupdate dependency
  ansible.builtin.apt:
    name: python3-dnspython
    state: present

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Create A record for backup server
  community.general.nsupdate:
    key_algorithm: "hmac-sha256"
    key_name: "nsupdate.key"
    key_secret: "{{ nsupdate_key }}"
    record: "backup.{{ domain_name }}"
    server: "{{hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address']}}"
    state: present
    type: A
    zone: "{{ domain_name }}"
    value: "{{ backup_ip }}"
  when: inventory_hostname in groups['dns_primary']

- name: Assign cnames
  include_role:
    name: "cname"
  vars:
    service: "ns{{inventory_hostname | replace('serobon','')}}"